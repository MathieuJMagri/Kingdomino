namespace ca.mcgill.ecse223.kingdomino.model;

class Gameplay {

    gamestatus {
    	Setup{
    		start -> Initializing.CreatingFirstDraft;
    	}
		Initializing {
            CreatingFirstDraft {
                entry/{shuffleDominos(); setNextDraft(); orderNextDraft();}
                draftReady -> /{revealNextDraft(); generateInitialPlayerOrder();} Initializing.SelectingFirstDomino;
            }
            SelectingFirstDomino {
            	selectionComplete [isSelectionValid()] -> /{nextPlayer();} Initializing.SelectingFirstDomino;
            	endOfTurn [isCurrentPlayerTheLastInTurn() && isSelectionValid()] -> /{setNextDraft(); orderNextDraft(); revealNextDraft(); generatePlayerOrder();} Playing.PlacingDomino;
            }
        }
        Playing {
        	PlacingDomino {
        		entry/{revealNextDraft();}
        		readyToPlace [isDominoCorrectlyPreplaced() && !isCurrentTurnTheLastInGame()] -> /{placeDomino(); updateScore();} Playing.SelectingDomino;
        		discard [isImpossibleToPlace() && !isCurrentTurnTheLastInGame()] -> /{discardDomino(); updateScore(); } Playing.SelectingDomino;
        		placeLast [isDominoCorrectlyPreplaced() && isCurrentTurnTheLastInGame()] -> /{placeDomino(); updateScore(); nextPlayer();} Playing.PlacingDomino;
        		discardLast [isImpossibleToPlace() && isCurrentTurnTheLastInGame()] -> /{discardDomino(); updateScore(); nextPlayer();} Playing.PlacingDomino;
        		endGame [isCurrentTurnTheLastInGame() && isCurrentPlayerTheLastInTurn()] -> Playing.EndingGame;
        	}
        	SelectingDomino {
        		selectionComplete [isSelectionValid()] -> /{nextPlayer();} Playing.PlacingDomino;
        		endOfTurn [isCurrentPlayerTheLastInTurn() && isSelectionValid()] ->  Playing.CreatingDraft;
        	}
        	CreatingDraft {
        		entry/{setNextDraft(); orderNextDraft();}
                draftReady -> /{generatePlayerOrder();} Playing.PlacingDomino;
        	}
        	EndingGame {
        		entry/{calculatingScores();}
        	}
        }
    }

    /*
     * Setter for test setup
     */

    public void setGamestatus(String status){
        switch (status) {
       	case "CreatingFirstDraft":
       	    gamestatus = Gamestatus.Initializing;
       	    gamestatusInitializing = GamestatusInitializing.CreatingFirstDraft;
       	    gamestatusPlaying = GamestatusPlaying.Null;
       	    setGamestatusInitializing(GamestatusInitializing.CreatingFirstDraft);
       	    break;
       	case "SelectingFirstDomino":
       		gamestatus = Gamestatus.Initializing;
       	    gamestatusInitializing = GamestatusInitializing.SelectingFirstDomino;
       	    gamestatusPlaying = GamestatusPlaying.Null;
       	    setGamestatusInitializing(GamestatusInitializing.SelectingFirstDomino);
       	    break;
       	case "PlacingDomino":
       		gamestatus = Gamestatus.Playing;
       	    gamestatusInitializing = GamestatusInitializing.Null;
       	    gamestatusPlaying = GamestatusPlaying.PlacingDomino;
       	    setGamestatusPlaying(GamestatusPlaying.PlacingDomino);
       	    break;
       	case "SelectingDomino":
       		gamestatus = Gamestatus.Playing;
       	    gamestatusInitializing = GamestatusInitializing.Null;
       	    gamestatusPlaying = GamestatusPlaying.SelectingDomino;
       	    setGamestatusPlaying(GamestatusPlaying.SelectingDomino);
       	    break;
       	case "CreatingDraft":
       		gamestatus = Gamestatus.Playing;
       	    gamestatusInitializing = GamestatusInitializing.Null;
       	    gamestatusPlaying = GamestatusPlaying.CreatingDraft;
       	    setGamestatusPlaying(GamestatusPlaying.CreatingDraft);
       	    break;   
       	case "EndingGame":
       		gamestatus = Gamestatus.Playing;
       	    gamestatusInitializing = GamestatusInitializing.Null;
       	    gamestatusPlaying = GamestatusPlaying.EndingGame;
       	    setGamestatusPlaying(GamestatusPlaying.EndingGame);
       	    break;     	    
       	default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
       	}
    }

    /*
     * Guards
     */
    
    public boolean isCurrentPlayerTheLastInTurn() {
        return ca.mcgill.ecse223.kingdomino.controller.KingdominoController.isCurrentPlayerTheLastInTurn();
    }
        
    public boolean isCurrentTurnTheLastInGame() {
        return ca.mcgill.ecse223.kingdomino.controller.KingdominoController.isCurrentTurnTheLastInGame();
    }
    
    public boolean isSelectionValid() {
        return ca.mcgill.ecse223.kingdomino.controller.KingdominoController.isSelectionValid();
    }
    
    public boolean isDominoCorrectlyPreplaced(){
    	return ca.mcgill.ecse223.kingdomino.controller.KingdominoController.isDominoCorrectlyPreplaced();
    }
    
    public boolean isImpossibleToPlace(){
    	return !ca.mcgill.ecse223.kingdomino.controller.KingdominoController.isPossibleToPlace();
    }
    // You may need to add more guards here
        
        
    /*
     * Actions
     */

    public void shuffleDominos() {
        ca.mcgill.ecse223.kingdomino.controller.KingdominoController.shuffleDominos();
    }
    
    public void setNextDraft() {
        ca.mcgill.ecse223.kingdomino.controller.KingdominoController.setNextDraft();
    }
    
    public void orderNextDraft() {
        ca.mcgill.ecse223.kingdomino.controller.KingdominoController.orderNextDraft();
        draftReady();
    }
    
    public void revealNextDraft() {
        ca.mcgill.ecse223.kingdomino.controller.KingdominoController.revealNextDraft();
    }
    
    public void generateInitialPlayerOrder() {
        ca.mcgill.ecse223.kingdomino.controller.KingdominoController.generateInitialPlayerOrder();
    }
    
    public void nextPlayer() {
    	ca.mcgill.ecse223.kingdomino.controller.KingdominoController.nextPlayer();
    }
    
    public void generatePlayerOrder() {
		ca.mcgill.ecse223.kingdomino.controller.KingdominoController.generatePlayerOrder(); 
    }

	public void placeDomino(){
		ca.mcgill.ecse223.kingdomino.controller.KingdominoController.placeDomino();
	}
	
	public void discardDomino(){
		ca.mcgill.ecse223.kingdomino.controller.KingdominoController.discardDomino();
	}
	
	public void calculatingScores(){
		ca.mcgill.ecse223.kingdomino.controller.KingdominoController.calculateRanking();
	}
	
	public void updateScore(){
		ca.mcgill.ecse223.kingdomino.controller.KingdominoController.updateScore();
	}
    // You may need to add more actions here
}
